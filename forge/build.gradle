buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'gradle.plugin.com.github.johnrengelman:shadow:7.0.0'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.1"
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

repositories {
    maven {
        url = 'https://maven.blamejared.com'
    }
}

archivesBaseName = archives_base_name + "-" + mc_ver + "-FORGE"
buildDir = rootProject.buildDir

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

configurations {
    shade
    compileOnly.extendsFrom shade
    compileOnly.extendsFrom shadeSource
}


mixin {
    add sourceSets.main, "croptopia.refmap.json"
    config "croptopia.mixins.json"
}

minecraft {
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    mappings channel: 'parchment', version: '2022.03.06-1.16.5'
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=croptopia.mixins.json"
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console //property 'forge.logging.console.level', 'debug'
            args '--mod', 'croptopia', '--all', '--output', file('src/generated/resources/'), '--existing', project(":shared").file('src/main/resources/')
            mods {
                croptopia {
                    sources(sourceSets.main, project(":shared").sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            mods {
                croptopia {
                    sources(sourceSets.main, project(":shared").sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'croptopia', '--all', '--output', file('src/generated/resources/'), '--existing', project(":shared").file('src/main/resources/')
            mods {
                croptopia {
                    sources(sourceSets.main, project(":shared").sourceSets.main)
                }
            }
        }
    }
}

tasks.processResources.dependsOn(project(":shared").tasks.processResources)

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    implementation project(":shared")
    shade project(":shared")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-48:api")
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
    }
}

shadowJar {
    archiveClassifier = ""
    enabled = true
    configurations = [project.configurations.shade]
    //archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORG2E-${rootProject.version}.jar"
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    relocate 'dependents/platform', 'data/forge'
}

artifacts {
    archives shadowJar
    shadow shadowJar
}

jar {
    //archiveFileName = rootProject.archives_base_name + "-${project.mc_ver}-FORGE-${rootProject.version}.jar"
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    manifest {
        attributes([
                "Specification-Title": "croptopia",
                "Specification-Vendor": "thonk",
                "Specification-Version": "1",
                "Implementation-Title": "${archives_base_name}",
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"me thonk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "croptopia.mixins.json"
        ])
    }
}

tasks.build.dependsOn(tasks.shadowJar)

reobf {
    shadowJar {}
}

jar.finalizedBy('reobfJar')

//tasks.getByName("addRefMapToShadowJar").mustRunAfter(task("shadowJar"))
