import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

repositories {
    mavenCentral()
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url = 'https://maven.blamejared.com'
    }
    maven {
        url = "https://maven.terraformersmc.com/"
    }
}

archivesBaseName = archives_base_name

configurations {
    shade
    compile.extendsFrom shade
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated",
                    rootProject.sourceSets.main.resources
            ]
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.mc_ver}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.18.1:2021.12.19")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    modImplementation "vazkii.patchouli:Patchouli:1.19-74-FABRIC-SNAPSHOT"

    modImplementation(include("org.spongepowered:configurate-hocon:4.1.2"))
    modImplementation(include("org.spongepowered:configurate-core:4.1.2"))
    include("com.typesafe:config:1.4.1")
    include("io.leangen.geantyref:geantyref:1.3.11")
    //modImplementation(include("ca.stellardrift:confabricate:2.2.0-SNAPSHOT"))

    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}",{
        exclude(group: "net.fabricmc.fabric-api")
    }

    shade(rootProject)
    compileOnly(rootProject)
    implementation(rootProject)
}

loom {
    accessWidenerPath = file("src/main/resources/croptopia.accesswidener")

    runs {
        client {
            client()
            name "Fabric Client"
            ideConfigGenerated = true
        }

        server {
            server()
            name "Fabric Server"
            ideConfigGenerated = true
        }

        datagen {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            //vmArg "-Dfabric-api.datagen.output-dir=${rootProject.file("src/main/generated")}"
            runDir "build/datagen"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "mod_version": rootProject.version
    }

    //from(sourceSets.main.resources.srcDirs) {
    //    include('**/data/croptopia/recipes/**')
    //    expand "dependent": "c"
    //}

    from(sourceSets.main.resources.srcDirs) {
        include('**/data/**')
        include('**/dependents/**')
        expand "dependent": "c"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}
tasks.processResources.dependsOn(rootProject.tasks.processResources)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    source(rootProject.sourceSets.main.allSource)
    doLast {
        copy {
            from "${buildDir}/resources/main/dependents/platform"
            include "**/**/*.json"
            expand "dependent": "c"
            into "${buildDir}/resources/main/data/c/"
        }
    }
}

shadowJar {
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-dev.jar"
    configurations = [project.configurations.shade]
    relocate 'dependents/platform', 'data/c'
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-${rootProject.version}.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }
}
