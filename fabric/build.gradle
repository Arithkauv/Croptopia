import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'maven-publish'
}

repositories {
    mavenCentral()
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url = 'https://maven.blamejared.com'
    }
    maven {
        url = "https://maven.terraformersmc.com/"
    }
}

archivesBaseName = archives_base_name
buildDir = rootProject.buildDir

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.mc_ver}"
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    modImplementation "vazkii.patchouli:Patchouli:1.18.2-67-FABRIC-SNAPSHOT"

    modImplementation(include("org.spongepowered:configurate-hocon:4.1.2"))
    modImplementation(include("org.spongepowered:configurate-core:4.1.2"))
    include("com.typesafe:config:1.4.1")
    include("io.leangen.geantyref:geantyref:1.3.11")
    //modImplementation(include("ca.stellardrift:confabricate:2.2.0-SNAPSHOT"))

    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}",{
        exclude(group: "net.fabricmc.fabric-api")
    }

    shade project(":shared")
    implementation(project(":shared"))
}

loom {
    accessWidenerPath = file("src/main/resources/croptopia.accesswidener")

    runs {
        datagen {
            server()
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(":shared").file("src/main/generated")}"
            runDir "build/datagen"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "mod_version": rootProject.version
    }

    from(sourceSets.main.resources.srcDirs) {
        include('**/data/croptopia/recipes/**')
        expand "dependant": "c"
    }
}
tasks.processResources.dependsOn(project(":shared").tasks.processResources)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

shadowJar {
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-dev.jar"
    configurations = [project.configurations.shade]
    relocate 'dependants/platform', 'data/c'
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input = tasks.shadowJar.archiveFile
    remapAccessWidener = true
    addNestedDependencies = true
    //destinationDirectory = new File("${rootProject.projectDir}/build/jars")
    archiveFileName = rootProject.archives_base_name + "-${rootProject.mc_ver}-FABRIC-${rootProject.version}.jar"
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
    archives remappedShadowJar
    shadow shadowJar
}